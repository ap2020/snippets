import {WebClient} from "@slack/web-api";

const sleep = async (millis: number) => await new Promise(resolve => setTimeout(resolve, millis));

// tab-separated channel names of three columns:
// channel ID, original channel name, new channel name
const dataStr = `
CXXXXXXXXXX	current-channel-name	alias-name
CYYYYYYYYYY	current-channel-name-2	alias-name-2
`;
// channel ID and original channel name can be generated by code commented out below

// // noinspection BadExpressionStatementJS
// (async () => {
//     const client = new WebClient(process.env.SLACK_BOT_TOKEN);

//     const channels = (await client.conversations.list({
//         token: process.env.SLACK_BOT_TOKEN,
//         limit: 1000,
//     })).channels as { name: String, id: String, is_archived: boolean, is_private: boolean }[];
//     // console.log(channels);

//     for (const channel of channels) {
//         if (!channel.is_archived) {
//             console.log([channel.id, channel.name].join("\t"));
//         }
//     }
// });

const data = dataStr.trim().split("\n").map(s => s.split("\t"));

(async () => {
    try {
        const client = new WebClient(process.env.SLACK_TOKEN_USER);

        for (const row of data) {
            let [channelID, originalName, aliasName] = row;

            let channel = (await client.conversations.info({
                channel: channelID,
            })).channel as {is_member: boolean};
            console.log(channel);
            await sleep(1000);

            const joined = channel.is_member;

            if (!joined) await client.conversations.join({
                channel: channelID,
            });
            await sleep(1000);

            await client.conversations.rename({
                channel: channelID,
                name: aliasName,
            });
            await sleep(1000);

            await client.conversations.rename({
                channel: channelID,
                name: originalName,
            });
            await sleep(1000);

            // Delete "channel renamed" messages
            const messages = ((await client.conversations.history({
                channel: channelID,
            })).messages as any[])
                .filter(({subtype}) => subtype === "channel_name")
                .slice(0,2); // because we renamed it twice
            for (const m of messages) {
                await client.chat.delete({
                    channel: channelID,
                    ts: m.ts,
                });
                await sleep(1000);
            }

            if (!joined) await client.conversations.leave({
                channel: channelID,
            });
            await sleep(7000);
        }
    } catch (e) {
        console.error(e);
    }
})();


